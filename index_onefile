<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DJ Console</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background: #1a1a1a;
            color: white;
            min-height: 100vh;
            padding: 2rem;
        }

        .console, .about-section {
            max-width: 1200px;
            margin: 0 auto 2rem;
            background: #2a2a2a;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.5);
        }
        
        .about-section h2 {
            color: #007bff;
            margin-bottom: 1rem;
        }
        
        .about-section p {
            margin-bottom: 1rem;
        }

        .deck-container {
            display: flex;
            gap: 2rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        .deck {
            flex: 1;
            min-width: 300px;
            background: #333;
            padding: 1.5rem;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .track-info {
            text-align: center;
            min-height: 3em;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.3rem;
        }
        
        .bpm-badge {
            display: inline-block;
            background-color: #ff5500;
            color: white;
            font-weight: bold;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.8rem;
        }

        .controls {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .button-row {
            display: flex;
            gap: 0.5rem;
        }

        .tap-tempo {
            padding: 0.5rem;
            background: #ff5500;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
        }

        .tap-tempo:hover {
            background: #ff7730;
        }

        .slider-container {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .slider-container label {
            min-width: 80px;
        }

        input[type="file"] {
            display: block;
            width: 100%;
            padding: 0.5rem;
            background: #444;
            border-radius: 4px;
            border: none;
            color: white;
        }

        input[type="range"] {
            flex: 1;
        }

        .progress-bar {
            width: 100%;
            height: 20px;
            background: #444;
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 1rem;
            display: none;
        }

        .dual-view-container {
            width: 100%;
            height: 40px;
            margin-bottom: 1rem;
            position: relative;
        }

        .zoom-waveform {
            width: 100%;
            height: 100%;
            background: #333;
            border-radius: 4px;
            position: relative;
            overflow: hidden;
        }

        .beat-marker {
            position: absolute;
            width: 2px;
            background-color: #ff5500;
            height: 100%;
            top: 0;
            z-index: 10;
        }
        
        .main-beat-marker {
            position: absolute;
            width: 3px;
            background-color: #00ff66;
            height: 100%;
            top: 0;
            z-index: 11;
        }

        button {
            padding: 0.5rem 1rem;
            background: #007bff;
            border: none;
            border-radius: 4px;
            color: white;
            cursor: pointer;
            transition: background 0.3s;
        }

        button:hover {
            background: #0056b3;
        }

        button:disabled {
            background: #666;
            cursor: not-allowed;
        }

        .title {
            text-align: center;
            margin-bottom: 2rem;
            color: #007bff;
        }

        .error {
            color: #ff4444;
            text-align: center;
            margin: 1rem 0;
        }

        .waveform-container {
            width: 100%;
            height: 80px;
            background: #222;
            border-radius: 4px;
            margin-bottom: 1rem;
            position: relative;
            overflow: hidden;
            cursor: pointer;
        }

        .waveform-container:hover {
            background: #2a2a2a;
        }

        .waveform-canvas {
            width: 100%;
            height: 100%;
            display: block;
        }

        .no-waveform {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            color: #666;
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <div class="console">
        <h1 class="title">Bassi e Tamburi</h1>
        <h3 class="title">Drum and Bass</h3>
        <div id="error-message" class="error"></div>
        <div class="deck-container">
            <!-- Deck 1 -->
            <div class="deck">
                <h2>Deck 1</h2>
                <input type="file" id="audio1" accept="audio/*">
                <div class="track-info" id="track-info1">No track loaded</div>
                <div class="waveform-container">
                    <div class="no-waveform" id="no-waveform1">Load a track to see waveform</div>
                    <canvas id="waveform1" class="waveform-canvas"></canvas>
                </div>
                <div class="dual-view-container">
                    <div class="zoom-waveform" id="zoom-container1">
                        <canvas id="zoom-waveform1" class="waveform-canvas"></canvas>
                    </div>
                </div>
                <div class="progress-bar">
                    <div class="progress" id="progress1"></div>
                </div>
                <div class="controls">
                    <div class="button-row">
                        <button id="playBtn1" disabled>Play</button>
                        <button id="tapTempo1" class="tap-tempo">Tap Tempo</button>
                    </div>
                    <div class="slider-container">
                        <label>Volume:</label>
                        <input type="range" id="volume1" min="0" max="100" value="100">
                    </div>
                    <div class="slider-container">
                        <label>Speed:</label>
                        <input type="range" id="speed1" min="50" max="150" value="100">
                    </div>
                </div>
            </div>

            <!-- Deck 2 -->
            <div class="deck">
                <h2>Deck 2</h2>
                <input type="file" id="audio2" accept="audio/*">
                <div class="track-info" id="track-info2">No track loaded</div>
                <div class="waveform-container">
                    <div class="no-waveform" id="no-waveform2">Load a track to see waveform</div>
                    <canvas id="waveform2" class="waveform-canvas"></canvas>
                </div>
                <div class="dual-view-container">
                    <div class="zoom-waveform" id="zoom-container2">
                        <canvas id="zoom-waveform2" class="waveform-canvas"></canvas>
                    </div>
                </div>
                <div class="progress-bar">
                    <div class="progress" id="progress2"></div>
                </div>
                <div class="controls">
                    <div class="button-row">
                        <button id="playBtn2" disabled>Play</button>
                        <button id="tapTempo2" class="tap-tempo">Tap Tempo</button>
                    </div>
                    <div class="slider-container">
                        <label>Volume:</label>
                        <input type="range" id="volume2" min="0" max="100" value="100">
                    </div>
                    <div class="slider-container">
                        <label>Speed:</label>
                        <input type="range" id="speed2" min="50" max="150" value="100">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="about-section">
        <h2>About This Project</h2>
        <p>Hi, I'm Svisionair, I wanted to rush the go live with this website project even though it's just the very foundation. This is my hobby, to build websites, create music and visuals. I like modern arts and new ways to express it.</p>
        <div id="aboutContent"></div>
    </div>

    <script>
        // Initialize AudioContext
        let audioContext;
        
        // Try to initialize audio context on first user interaction
        document.addEventListener('click', initializeAudioContext, { once: true });

        function initializeAudioContext() {
            try {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                console.log('Audio context initialized');
            } catch (e) {
                showError("Could not initialize audio system. Please check your browser settings.");
            }
        }

        function showError(message) {
            const errorDiv = document.getElementById('error-message');
            if (errorDiv) {
                errorDiv.textContent = message;
                setTimeout(() => {
                    errorDiv.textContent = '';
                }, 5000);
            }
            console.error(message);
        }

        class DJDeck {
            constructor(deckNumber) {
                this.deckNumber = deckNumber;
                this.audioSource = null;
                this.gainNode = null;
                this.analyserNode = null;
                this.audioBuffer = null;
                this.isPlaying = false;
                this.animationFrame = null;
                this.beatMarkers = [];
                this.lastVisualizedBeat = 0;
                this.bpm = 0;
                this.pauseTime = 0;
                
                // Tap tempo related properties
                this.tapTimes = [];
                this.lastTapTime = 0;
                this.tapTempoActive = false;
                
                // DOM Elements
                this.fileInput = document.getElementById(`audio${deckNumber}`);
                this.playBtn = document.getElementById(`playBtn${deckNumber}`);
                this.tapTempoBtn = document.getElementById(`tapTempo${deckNumber}`);
                this.volumeSlider = document.getElementById(`volume${deckNumber}`);
                this.speedSlider = document.getElementById(`speed${deckNumber}`);
                this.trackInfo = document.getElementById(`track-info${deckNumber}`);
                this.progressBar = document.getElementById(`progress${deckNumber}`);
                this.waveformCanvas = document.getElementById(`waveform${deckNumber}`);
                this.zoomWaveformCanvas = document.getElementById(`zoom-waveform${deckNumber}`);
                this.zoomContainer = document.getElementById(`zoom-container${deckNumber}`);
                this.noWaveformDiv = document.getElementById(`no-waveform${deckNumber}`);
                
                // Set up canvases
                this.canvasCtx = this.waveformCanvas.getContext('2d');
                this.zoomCanvasCtx = this.zoomWaveformCanvas.getContext('2d');
                this.waveformCanvas.style.display = 'none';
                
                this.setupEventListeners();
            }

            setupEventListeners() {
                this.fileInput.addEventListener('change', (e) => {
                    const file = e.target.files[0];
                    if (file) {
                        this.loadTrack(file);
                    }
                });

                this.playBtn.addEventListener('click', () => {
                    if (this.audioBuffer) {
                        if (this.isPlaying) {
                            this.pause();
                        } else {
                            this.play();
                        }
                    }
                });

                this.volumeSlider.addEventListener('input', (e) => {
                    if (this.gainNode) {
                        this.gainNode.gain.value = e.target.value / 100;
                    }
                });

                this.speedSlider.addEventListener('input', (e) => {
                    if (this.audioSource) {
                        this.audioSource.playbackRate.value = e.target.value / 100;
                    }
                });
                
                // Tap Tempo button
                this.tapTempoBtn.addEventListener('click', () => {
                    this.handleTapTempo();
                });
                
                // Make waveform clickable for navigation
                this.waveformCanvas.addEventListener('click', (e) => {
                    if (!this.audioBuffer) return;
                    
                    const rect = this.waveformCanvas.getBoundingClientRect();
                    const clickX = e.clientX - rect.left;
                    const clickPosition = clickX / rect.width;
                    
                    // Calculate time to jump to
                    const jumpTime = clickPosition * this.audioBuffer.duration;
                    
                    // If playing, stop current playback
                    if (this.isPlaying) {
                        this.audioSource.stop();
                    }
                    
                    // Set new start time based on click position
                    this.startTime = audioContext.currentTime - jumpTime;
                    
                    // If was playing, restart from new position
                    if (this.isPlaying) {
                        this.audioSource = audioContext.createBufferSource();
                        this.audioSource.buffer = this.audioBuffer;
                        this.audioSource.connect(this.analyserNode);
                        this.audioSource.playbackRate.value = this.speedSlider.value / 100;
                        this.audioSource.start(0, jumpTime);
                    } else {
                        // Update position without playing
                        this.pauseTime = jumpTime;
                        this.drawStaticWaveform();
                        
                        // Draw the zoomed view at the clicked position
                        this.drawZoomedWaveform(jumpTime / this.audioBuffer.duration, jumpTime);
                        
                        // Update progress bar
                        const progress = (jumpTime / this.audioBuffer.duration) * 100;
                        this.progressBar.style.width = `${Math.min(progress, 100)}%`;
                    }
                });
                
                // Resize waveform canvas when window resizes
                window.addEventListener('resize', () => {
                    this.resizeCanvas();
                });
            }
            
            handleTapTempo() {
                const now = performance.now();
                
                // Reset if it's been too long since last tap (more than 3 seconds)
                if (now - this.lastTapTime > 3000) {
                    this.tapTimes = [];
                    this.tapTempoBtn.textContent = "Tap Tempo (1)";
                    this.tapTempoActive = true;
                }
                
                this.tapTimes.push(now);
                this.lastTapTime = now;
                
                // Update button to show tap count
                if (this.tapTempoActive) {
                    this.tapTempoBtn.textContent = `Tap Tempo (${this.tapTimes.length})`;
                }
                
                // Calculate BPM once we have at least 4 taps
                if (this.tapTimes.length >= 4) {
                    this.calculateTapTempo();
                }
                
                // Generate beat markers based on the tapped tempo if we have a track loaded
                if (this.audioBuffer && this.tapTimes.length >= 2) {
                    this.generateBeatsFromManualTaps();
                }
            }
            
            calculateTapTempo() {
                // Calculate intervals between taps
                const intervals = [];
                for (let i = 1; i < this.tapTimes.length; i++) {
                    intervals.push(this.tapTimes[i] - this.tapTimes[i-1]);
                }
                
                // Calculate the average interval (excluding outliers)
                const validIntervals = this.filterOutliers(intervals);
                const avgInterval = validIntervals.reduce((sum, val) => sum + val, 0) / validIntervals.length;
                
                // Convert to BPM (beats per minute)
                const bpm = Math.round(60000 / avgInterval);
                
                // Store and display the BPM
                this.bpm = bpm;
                this.updateBpmDisplay();
                
                return bpm;
            }
            
            filterOutliers(intervals) {
                // Simple outlier filtering: discard intervals that deviate too much from median
                if (intervals.length <= 3) return intervals; // Need at least 4 values for meaningful filtering
                
                // Calculate median
                const sortedIntervals = [...intervals].sort((a, b) => a - b);
                const mid = Math.floor(sortedIntervals.length / 2);
                const median = (sortedIntervals.length % 2 === 0)
                    ? (sortedIntervals[mid - 1] + sortedIntervals[mid]) / 2
                    : sortedIntervals[mid];
                
                // Keep values within 30% of median
                return intervals.filter(val => 
                    val >= median * 0.7 && val <= median * 1.3
                );
            }
            
            generateBeatsFromManualTaps() {
                if (!this.audioBuffer || this.tapTimes.length < 2) return;
                
                // Clear existing beat markers
                this.beatMarkers = [];
                
                // Calculate average interval between taps
                const intervals = [];
                for (let i = 1; i < this.tapTimes.length; i++) {
                    intervals.push(this.tapTimes[i] - this.tapTimes[i-1]);
                }
                
                // Calculate average interval in milliseconds
                const avgInterval = intervals.reduce((sum, val) => sum + val, 0) / intervals.length;
                
                // Convert to seconds
                const beatInterval = avgInterval / 1000;
                
                // Calculate when the first beat occurred relative to track start
                // This assumes the user started tapping in time with the track
                const firstTapTime = this.isPlaying ? 
                    (this.tapTimes[0] / 1000) - (audioContext.currentTime - this.startTime) : 
                    0; // If not playing, assume start of track
                
                // Generate beats for the entire track
                const trackDuration = this.audioBuffer.duration;
                
                // Generate beats before the first tap (if first tap wasn't at the start)
                if (firstTapTime > 0) {
                    let time = firstTapTime;
                    let beatCount = 0;
                    while (time > 0) {
                        time -= beatInterval;
                        if (time >= 0) {
                            beatCount++;
                            this.beatMarkers.push({
                                time: time,
                                strength: 1.0,
                                isKick: false,
                                // First tap is considered beat 0, so we're going backwards
                                isMainBeat: beatCount % 4 === 0
                            });
                        }
                    }
                }
                
                // Generate beats forward from the first tap
                let time = firstTapTime;
                let beatCount = 0; // Start count from 0 for the first tap
                
                while (time < trackDuration) {
                    // Every 4th beat (starting with the first tap) is a main beat (green)
                    const isMainBeat = beatCount % 4 === 0;
                    
                    this.beatMarkers.push({
                        time: time,
                        strength: 1.0,
                        isKick: false,
                        isMainBeat: isMainBeat
                    });
                    
                    time += beatInterval;
                    beatCount++;
                }
                
                // Sort all markers by time
                this.beatMarkers.sort((a, b) => a.time - b.time);
                
                console.log(`Generated ${this.beatMarkers.length} beats based on manual taps with ${beatInterval.toFixed(3)}s interval`);
                
                // Update the BPM display
                this.updateBpmDisplay();
                
                // Redraw the waveform with new beat markers
                if (this.isPlaying) {
                    // If playing, let the animation frame update
                } else {
                    // If stopped, redraw static view
                    this.drawStaticWaveform();
                    
                    // Draw position line if paused
                    if (this.pauseTime > 0) {
                        const position = this.pauseTime / this.audioBuffer.duration;
                        
                        // Draw position marker at current pause position
                        const positionX = position * this.waveformCanvas.width;
                        const ctx = this.canvasCtx;
                        const height = this.waveformCanvas.height;
                        
                        ctx.beginPath();
                        ctx.moveTo(positionX, 0);
                        ctx.lineTo(positionX, height);
                        ctx.strokeStyle = '#ff5500';
                        ctx.lineWidth = 3;
                        ctx.stroke();
                        
                        // Draw zoomed waveform
                        this.drawZoomedWaveform(position, this.pauseTime);
                    }
                }
            }
            
            updateBpmDisplay() {
                if (!this.bpm) return;
                
                // Get current track name without BPM badge (if any)
                let trackName = this.trackInfo.textContent.replace(/\s*\d+\s*BPM$/, '');
                
                // Update track info with BPM
                this.trackInfo.innerHTML = `${trackName} <span class="bpm-badge">${this.bpm} BPM</span>`;
            }
            
            resizeCanvas() {
                // Main waveform
                const container = this.waveformCanvas.parentElement;
                this.waveformCanvas.width = container.clientWidth;
                this.waveformCanvas.height = container.clientHeight;
                
                // Zoom waveform
                const zoomContainer = this.zoomWaveformCanvas.parentElement;
                this.zoomWaveformCanvas.width = zoomContainer.clientWidth;
                this.zoomWaveformCanvas.height = zoomContainer.clientHeight;
                
                // Redraw waveform if we have data
                if (this.audioBuffer) {
                    this.drawStaticWaveform();
                }
            }

            async loadTrack(file) {
                try {
                    if (!audioContext) {
                        initializeAudioContext();
                    }

                    const arrayBuffer = await file.arrayBuffer();
                    this.audioBuffer = await audioContext.decodeAudioData(arrayBuffer);

                    // Create audio nodes
                    if (this.audioSource) {
                        this.audioSource.disconnect();
                    }
                    
                    // Create analyzer for waveform
                    this.analyserNode = audioContext.createAnalyser();
                    this.analyserNode.fftSize = 2048;
                    this.bufferLength = this.analyserNode.frequencyBinCount;
                    this.dataArray = new Uint8Array(this.bufferLength);
                    
                    // Connect nodes for future playback
                    this.gainNode = audioContext.createGain();
                    this.gainNode.connect(audioContext.destination);
                    this.analyserNode.connect(this.gainNode);

                    // Set initial values
                    this.gainNode.gain.value = this.volumeSlider.value / 100;

                    // Update UI
                    this.trackInfo.textContent = file.name;
                    this.playBtn.disabled = false;
                    this.playBtn.textContent = "Play";
                    this.isPlaying = false;
                    this.pauseTime = 0;
                    
                    // Prepare waveform
                    this.resizeCanvas();
                    this.waveformCanvas.style.display = 'block';
                    this.noWaveformDiv.style.display = 'none';
                    
                    // Reset beat markers
                    this.beatMarkers = [];
                    
                    // Draw waveforms
                    this.drawStaticWaveform();

                } catch (error) {
                    showError(`Error loading track: ${error.message}`);
                }
            }
            
            drawStaticWaveform() {
                const width = this.waveformCanvas.width;
                const height = this.waveformCanvas.height;
                const ctx = this.canvasCtx;
                
                // Clear canvas
                ctx.clearRect(0, 0, width, height);
                
                // If no buffer, nothing to draw
                if (!this.audioBuffer) return;
                
                // Get the audio data
                const rawData = this.audioBuffer.getChannelData(0); // Use first channel
                const samples = 200; // Number of samples to display
                const blockSize = Math.floor(rawData.length / samples);
                const amplitudeData = [];
                
                // Collect amplitude data
                for (let i = 0; i < samples; i++) {
                    let sum = 0;
                    for (let j = 0; j < blockSize; j++) {
                        sum += Math.abs(rawData[(i * blockSize) + j] || 0);
                    }
                    amplitudeData.push(sum / blockSize);
                }
                
                // Find the max amplitude for scaling
                const maxAmplitude = Math.max(...amplitudeData) || 1;
                
                // Draw the waveform
                ctx.beginPath();
                ctx.lineWidth = 2;
                ctx.strokeStyle = '#007bff';
                
                const sliceWidth = width / samples;
                let x = 0;
                
                for (let i = 0; i < samples; i++) {
                    const scaledAmplitude = (amplitudeData[i] / maxAmplitude) * height;
                    const y = (height / 2) - (scaledAmplitude * 0.8); // Scale to 80% of half-height
                    
                    if (i === 0) {
                        ctx.moveTo(x, y);
                    } else {
                        ctx.lineTo(x, y);
                    }
                    
                    x += sliceWidth;
                }
                
                // Complete the symmetric waveform by adding the bottom half
                for (let i = samples - 1; i >= 0; i--) {
                    const scaledAmplitude = (amplitudeData[i] / maxAmplitude) * height;
                    const y = (height / 2) + (scaledAmplitude * 0.8); // Mirror the top half
                    
                    ctx.lineTo(x, y);
                    x -= sliceWidth;
                }
                
                ctx.closePath();
                ctx.fillStyle = 'rgba(0, 123, 255, 0.3)';
                ctx.fill();
                ctx.stroke();
            }
            
            // Update waveform with playback position
            updatePlaybackPosition() {
                if (!this.isPlaying || !this.audioBuffer) {
                    if (this.animationFrame) {
                        cancelAnimationFrame(this.animationFrame);
                        this.animationFrame = null;
                    }
                    return;
                }
                
                // Get current position
                const elapsed = audioContext.currentTime - this.startTime;
                const position = elapsed / this.audioBuffer.duration;
                const positionX = position * this.waveformCanvas.width;
                
                // Check if playback is finished
                if (position >= 1) {
                    this.stop();
                    return;
                }
                
                // Redraw main waveform
                this.drawStaticWaveform();
                
                // Draw position line on main waveform
                const ctx = this.canvasCtx;
                const height = this.waveformCanvas.height;
                
                ctx.beginPath();
                ctx.moveTo(positionX, 0);
                ctx.lineTo(positionX, height);
                ctx.strokeStyle = '#ff5500';
                ctx.lineWidth = 3;
                ctx.stroke();
                
                // Draw zoomed waveform with beat markers
                this.drawZoomedWaveform(position, elapsed);
                
                // Continue animation loop
                this.animationFrame = requestAnimationFrame(() => this.updatePlaybackPosition());
            }
            
            drawZoomedWaveform(position, currentTime) {
                const canvas = this.zoomWaveformCanvas;
                const ctx = this.zoomCanvasCtx;
                const width = canvas.width;
                const height = canvas.height;
                
                // Clear canvas
                ctx.clearRect(0, 0, width, height);
                
                // Clear any existing beat markers
                const beatElements = this.zoomContainer.querySelectorAll('.beat-marker, .main-beat-marker');
                beatElements.forEach(el => el.remove());
                
                // If no buffer, nothing to draw
                if (!this.audioBuffer) return;
                
                // Calculate the window to display (4 seconds of audio)
                const windowDuration = 4; // Show 4 seconds of audio (2 seconds before and after current position)
                const sampleRate = this.audioBuffer.sampleRate;
                const samplesPerSecond = sampleRate;
                const windowSamples = windowDuration * samplesPerSecond;
                
                // Get the audio data
                const rawData = this.audioBuffer.getChannelData(0); // Use first channel
                
                // Calculate the window to display
                const centerSample = Math.floor(position * rawData.length);
                const startSample = Math.max(0, centerSample - windowSamples/2);
                const endSample = Math.min(rawData.length, centerSample + windowSamples/2);
                
                // Sample points for drawing
                const samples = 200;
                const samplesPerPoint = Math.max(1, Math.floor((endSample - startSample) / samples));
                
                // Prepare amplitude data
                const amplitudeData = [];
                
                for (let i = 0; i < samples; i++) {
                    const sampleIndex = startSample + i * samplesPerPoint;
                    if (sampleIndex >= endSample) break;
                    
                    let maxAmplitude = 0;
                    for (let j = 0; j < samplesPerPoint; j++) {
                        const sampleValue = Math.abs(rawData[sampleIndex + j] || 0);
                        maxAmplitude = Math.max(maxAmplitude, sampleValue);
                    }
                    
                    amplitudeData.push(maxAmplitude);
                }
                
                // Find max amplitude for scaling
                const maxValue = Math.max(...amplitudeData, 0.1);
                
                // Draw the zoomed waveform
                ctx.beginPath();
                ctx.lineWidth = 2;
                ctx.strokeStyle = '#00c2ff'; // Brighter blue for zoomed view
                
                const sliceWidth = width / amplitudeData.length;
                let x = 0;
                
                for (let i = 0; i < amplitudeData.length; i++) {
                    const scaledAmplitude = (amplitudeData[i] / maxValue) * height;
                    const y = (height / 2) - (scaledAmplitude * 0.8);
                    
                    if (i === 0) {
                        ctx.moveTo(x, y);
                    } else {
                        ctx.lineTo(x, y);
                    }
                    
                    x += sliceWidth;
                }
                
                // Complete the symmetric waveform
                for (let i = amplitudeData.length - 1; i >= 0; i--) {
                    const scaledAmplitude = (amplitudeData[i] / maxValue) * height;
                    const y = (height / 2) + (scaledAmplitude * 0.8);
                    ctx.lineTo(x, y);
                    x -= sliceWidth;
                }
                
                ctx.fillStyle = 'rgba(0, 194, 255, 0.3)';
                ctx.fill();
                ctx.closePath();
                ctx.stroke();
                
                // Draw center line indicating current position
                ctx.beginPath();
                ctx.moveTo(width / 2, 0);
                ctx.lineTo(width / 2, height);
                ctx.strokeStyle = '#ff5500';
                ctx.lineWidth = 2;
                ctx.stroke();
                
                // Add beat markers that fall within the visible window
                const startTime = currentTime - windowDuration/2;
                const endTime = currentTime + windowDuration/2;
                
                // Filter to beats in the visible window
                const visibleBeats = this.beatMarkers.filter(beat => 
                    beat.time >= startTime && beat.time <= endTime);
                
                // Add visible beats as DOM elements
                if (this.zoomContainer) {
                    visibleBeats.forEach(beat => {
                        // Calculate position on the canvas
                        const relativePosition = (beat.time - startTime) / windowDuration;
                        const beatX = relativePosition * width;
                        
                        const marker = document.createElement('div');
                        
                        // Use different class for main beats (every 4th)
                        if (beat.isMainBeat) {
                            marker.className = 'main-beat-marker';
                        } else {
                            marker.className = 'beat-marker';
                        }
                        
                        marker.style.left = `${beatX}px`;
                        
                        this.zoomContainer.appendChild(marker);
                    });
                }
            }

            play() {
                if (this.audioBuffer && !this.isPlaying) {
                    // Create new source (needed after stopping)
                    this.audioSource = audioContext.createBufferSource();
                    this.audioSource.buffer = this.audioBuffer;
                    this.audioSource.connect(this.analyserNode);
                    this.audioSource.playbackRate.value = this.speedSlider.value / 100;
                    
                    // If resuming from pause, start from pause position
                    if (this.pauseTime) {
                        this.startTime = audioContext.currentTime - this.pauseTime;
                        this.audioSource.start(0, this.pauseTime);
                    } else {
                        this.startTime = audioContext.currentTime;
                        this.audioSource.start(0);
                    }
                    
                    this.isPlaying = true;
                    this.playBtn.textContent = "Pause";
                    
                    // Start playback position tracking
                    this.updatePlaybackPosition();
                }
            }

            pause() {
                if (this.isPlaying) {
                    this.audioSource.stop();
                    this.isPlaying = false;
                    this.playBtn.textContent = "Play";
                    
                    // Stop animation
                    if (this.animationFrame) {
                        cancelAnimationFrame(this.animationFrame);
                        this.animationFrame = null;
                    }
                    
                    // Calculate current position
                    const elapsed = audioContext.currentTime - this.startTime;
                    this.pauseTime = elapsed;
                    
                    // Redraw static waveform with position marker
                    this.drawStaticWaveform();
                    
                    // Draw position marker
                    const positionX = (elapsed / this.audioBuffer.duration) * this.waveformCanvas.width;
                    const ctx = this.canvasCtx;
                    const height = this.waveformCanvas.height;
                    
                    ctx.beginPath();
                    ctx.moveTo(positionX, 0);
                    ctx.lineTo(positionX, height);
                    ctx.strokeStyle = '#ff5500';
                    ctx.lineWidth = 3;
                    ctx.stroke();
                    
                    // Draw zoomed waveform at pause position
                    this.drawZoomedWaveform(elapsed / this.audioBuffer.duration, elapsed);
                }
            }

            stop() {
                if (this.audioSource) {
                    this.audioSource.stop();
                    this.isPlaying = false;
                    this.playBtn.textContent = "Play";
                    this.pauseTime = 0;
                    
                    // Stop animation
                    if (this.animationFrame) {
                        cancelAnimationFrame(this.animationFrame);
                        this.animationFrame = null;
                    }
                    
                    // Redraw static waveform
                    this.drawStaticWaveform();
                    
                    // Clear beat markers in zoom view
                    const beatElements = this.zoomContainer.querySelectorAll('.beat-marker, .main-beat-marker');
                    beatElements.forEach(el => el.remove());
                }
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            // Initialize decks
            const deck1 = new DJDeck(1);
            const deck2 = new DJDeck(2);
            
            // Resize canvases
            deck1.resizeCanvas();
            deck2.resizeCanvas();
            
            // Handle window resize
            window.addEventListener('resize', () => {
                deck1.resizeCanvas();
                deck2.resizeCanvas();
            });
            
            console.log('DJ Console initialized');
        });
    </script>
</body>
</html>
